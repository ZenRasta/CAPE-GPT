# backend/app/models/schemas.py

from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any

# --- Models for Data Returned from Database/Processing ---

class SimilarQuestion(BaseModel):
    """Represents a single similar past question found in the database."""
    id: int
    content_snippet: str = Field(..., description="A short snippet of the past question content.")
    # Corrected description below:
    year: Optional[int] = Field(None, description="Year the past question appeared.")
    paper: Optional[str] = Field(None, description="Paper identifier (e.g., 'Paper 01').")
    question_number: Optional[str] = Field(None, description="Question number identifier (e.g., '2a').")
    similarity_score: Optional[float] = Field(None, description="Cosine similarity score to the user's question.", ge=0, le=1)
    syllabus_section: Optional[str] = Field(None, description="The mapped syllabus objective text from the database.")
    specific_objective_id: Optional[str] = Field(None, description="The mapped syllabus objective ID from the database.")
    # Optional fields - uncomment if you plan to send this data
    # images: Optional[List[Dict[str, Any]]] = Field(None, description="Associated images (base64 data, ocr text)")
    # equations: Optional[List[Dict[str, Any]]] = Field(None, description="Associated equations (latex, text)")

    class Config:
        from_attributes = True
        # Example for OpenAPI docs
        schema_extra = {
            "example": {
                "id": 456,
                "content_snippet": "Derive the formula for...",
                "year": 2020,
                "paper": "Paper 01",
                "question_number": "15",
                "similarity_score": 0.85,
                "syllabus_section": "Use the Remainder Theorem",
                "specific_objective_id": "PM-U1-M1-SO1c"
            }
        }


class FrequencyAnalysisData(BaseModel):
    """Holds data about the frequency of similar past questions."""
    total_similar_found: int = Field(..., description="Total count of similar questions identified.")
    years_distribution: Dict[str, int] = Field(..., description="Dictionary mapping year (str) to count (int).")
    papers_distribution: Optional[Dict[str, int]] = Field(None, description="Optional: Dictionary mapping paper type (str) to count (int).")
    summary_statement: str = Field(..., description="A text summary of the frequency analysis (e.g., 'Found 5 similar questions...')")

    class Config:
        from_attributes = True
        schema_extra = {
             "example": {
                "total_similar_found": 7,
                "years_distribution": {"2022": 2, "2021": 3, "2020": 0, "2019": 2},
                "papers_distribution": {"Paper 01": 3, "Paper 02": 4},
                "summary_statement": "Found 7 similar questions from the last 4 years (2019-2022)."
            }
        }


class AnalysisResult(BaseModel):
    """Holds the detailed analysis generated by the LLM."""
    detailed_approach: str = Field(..., description="Step-by-step methodology to solve the question.")
    key_concepts: List[str] = Field(..., description="List of key concepts, topics, or formulas needed.")
    common_pitfalls: List[str] = Field(..., description="List of common mistakes or misunderstandings.")

    class Config:
        from_attributes = True
        schema_extra = {
             "example": {
                "detailed_approach": "1. Understand the definitions.\n2. Apply formula X.\n3. Check for edge cases.",
                "key_concepts": ["Differentiation", "Chain Rule", "Trigonometry"],
                "common_pitfalls": ["Sign errors in differentiation.", "Forgetting constants of integration.", "Incorrectly applying trigonometric identities."]
            }
        }


class SyllabusMapping(BaseModel):
    """Represents the final syllabus objective the user's question was mapped to."""
    objective_id: Optional[str] = Field(None, description="The specific ID of the matched syllabus objective.")
    objective_text: Optional[str] = Field(None, description="The full text of the matched syllabus objective.")
    # Optional fields
    # unit: Optional[str] = Field(None, description="Mapped syllabus unit.")
    # module: Optional[str] = Field(None, description="Mapped syllabus module.")

    class Config:
        from_attributes = True
        schema_extra = {
             "example": {
                "objective_id": "CS-U1-M3-SO2",
                "objective_text": "Write an algorithm that accepts an integer and then prints all multiples of 7 that are less than the accepted integer."
            }
        }


# --- Top-Level Response Model ---

class AnalyzeResponse(BaseModel):
    """The complete response structure for the /analyze_question endpoint."""
    recognized_question_text: Optional[str] = Field(None, description="Text extracted from the uploaded image via OCR or Vision LLM.")
    analysis: AnalysisResult = Field(..., description="Detailed analysis including approach, concepts, and pitfalls.")
    syllabus_mapping: Optional[SyllabusMapping] = Field(None, description="The best matching syllabus objective identified.")
    similar_past_questions: List[SimilarQuestion] = Field(..., description="List of similar past questions found.")
    frequency_analysis: FrequencyAnalysisData = Field(..., description="Analysis of the frequency of similar questions.")

    class Config:
        from_attributes = True
        